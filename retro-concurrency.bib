@article{de-vilhena-pottier-21,
  author = {Paulo Emílio de Vilhena and François Pottier},
  title = {A Separation Logic for Effect Handlers},
  journal = {Proceedings of the ACM on Programming Languages},
  volume = {5},
  number = {POPL},
  month = jan,
  year = {2021},
  url = {http://cambium.inria.fr/~fpottier/publis/de-vilhena-pottier-sleh.pdf},
  off = {https://dl.acm.org/doi/10.1145/3434314},
}

@InProceedings{Plotkin09,
author="Plotkin, Gordon
and Pretnar, Matija",
editor="Castagna, Giuseppe",
title="Handlers of Algebraic Effects",
booktitle="Programming Languages and Systems",
year="2009",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="80--94",
isbn="978-3-642-00590-9"
}

@inproceedings{Danvy90,
author = {Danvy, Olivier and Filinski, Andrzej},
title = {Abstracting Control},
year = {1990},
isbn = {089791368X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/91556.91622},
doi = {10.1145/91556.91622},
booktitle = {Proceedings of the 1990 ACM Conference on LISP and Functional Programming},
pages = {151–160},
numpages = {10},
location = {Nice, France},
series = {LFP '90}
}

@book{Steele90,
author = {Steele, Guy L.},
title = {Common LISP: The Language (2nd Ed.)},
year = {1990},
isbn = {1555580416},
publisher = {Digital Press},
address = {USA},
chapter = {29.3.3: Handling Conditions},
url = {https://www.cs.cmu.edu/Groups/AI/html/cltl/cltl2.html}
}

@inproceedings{Leijen14,
author = {Leijen, Daan},
title = {Type Directed Compilation of Row-Typed Algebraic Effects},
year = {2017},
isbn = {9781450346603},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3009837.3009872},
doi = {10.1145/3009837.3009872},
abstract = { Algebraic effect handlers, introduced by Plotkin and Power in 2002, are recently gaining in popularity as a purely functional approach to modeling effects. In this article, we give a full overview of practical algebraic effects in the context of a compiled implementation in the Koka language. In particular, we show how algebraic effects generalize over common constructs like exception handling, state, iterators and async-await. We give an effective type inference algorithm based on extensible effect rows using scoped labels, and a direct operational semantics. Finally, we show an efficient compilation scheme to common runtime platforms (like JavaScript) using a type directed selective CPS translation. },
booktitle = {Proceedings of the 44th ACM SIGPLAN Symposium on Principles of Programming Languages},
pages = {486–499},
numpages = {14},
keywords = {Algebraic Effect Handlers, CPS transformation, Type Inference},
location = {Paris, France},
series = {POPL 2017}
}

@article{Hillerstrom20,
title={Effect handlers via generalised continuations},
volume={30},
DOI={10.1017/S0956796820000040},
journal={Journal of Functional Programming},
publisher={Cambridge University Press},
author={Hillerström, Daniel and Lindley, Sam and Atkey, Robert},
year={2020},
pages={e5}
}

@misc{Pyro,
title={Pyro: Deep Universal Probabilistic Programming},
author={Eli Bingham and Jonathan P. Chen and Martin Jankowiak and Fritz Obermeyer and Neeraj Pradhan and Theofanis Karaletsos and Rohit Singh and Paul Szerlip and Paul Horsfall and Noah D. Goodman},
year={2018},
eprint={1810.09538},
archivePrefix={arXiv},
primaryClass={cs.LG}
}

@article{Frank,
  author    = {Lukas Convent and Sam Lindley and Conor McBride and Craig McLaughlin},
  title     = {Doo bee doo bee doo},
  journal   = {Journal of Functional Programming},
  volume    = {30},
  pages     = {e9},
  year      = {2020},
  doi       = {10.1017/S0956796820000039},
}

@article{Eff,
title = "Programming with algebraic effects and handlers",
journal = "Journal of Logical and Algebraic Methods in Programming",
volume = "84",
number = "1",
pages = "108--123",
year = "2015",
note = "Special Issue: The 23rd Nordic Workshop on Programming Theory (NWPT 2011) Special Issue: Domains X, International workshop on Domain Theory and applications, Swansea, 5-7 September, 2011",
issn = "2352-2208",
doi = "https://doi.org/10.1016/j.jlamp.2014.02.001",
url = "http://www.sciencedirect.com/science/article/pii/S2352220814000194",
author = "Andrej Bauer and Matija Pretnar",
}

@inproceedings{Cilk,
author = {Blumofe, Robert D. and Joerg, Christopher F. and Kuszmaul, Bradley C. and Leiserson, Charles E. and Randall, Keith H. and Zhou, Yuli},
title = {Cilk: An Efficient Multithreaded Runtime System},
year = {1995},
isbn = {0897917006},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/209936.209958},
doi = {10.1145/209936.209958},
booktitle = {Proceedings of the Fifth ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming},
pages = {207–216},
numpages = {10},
location = {Santa Barbara, California, USA},
series = {PPOPP '95}
}

@online{Coq,
	key = {Coq},
	title = {The Coq Proof Assistant},
	url = {https://coq.inria.fr/},
	year = {2020},
	urldate ={2020-11-09}
}

@online{colour,
	key = {Colour},
	title = {What Color is Your Function?},
	url = {http://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/},
	year = {2020},
	urldate ={2020-11-09}
}


@online{IntelTBB,
	key = {IntelTBB},
	title = {Intel Thread Building Blocks},
	year = {2020},
	url = {https://software.intel.com/content/www/us/en/develop/tools/threading-building-blocks.html},
	urldate = {2020-11-09}
}

@online{ExtVariants,
	key={OCaml Manual},
	title={Extensible variant types},
	year = {2020},
	url = {https://caml.inria.fr/pub/docs/manual-ocaml/extensiblevariants.html},
	urldate = {2020-11-09}
}

@online{DWARF,
	key={DWARF},
	title={The DWARF Debugging Standard},
	year={2020},
	url = {http://dwarfstd.org/},
	urldate = {2020-11-09}
}

@inproceedings{Imam14,
author = {Imam, Shams and Sarkar, Vivek},
title = {Habanero-Java Library: A Java 8 Framework for Multicore Programming},
year = {2014},
isbn = {9781450329262},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2647508.2647514},
doi = {10.1145/2647508.2647514},
booktitle = {Proceedings of the 2014 International Conference on Principles and Practices of Programming on the Java Platform: Virtual Machines, Languages, and Tools},
pages = {75–86},
numpages = {12},
location = {Cracow, Poland},
series = {PPPJ '14}
}

@inproceedings{Charles05,
author = {Charles, Philippe and Grothoff, Christian and Saraswat, Vijay and Donawa, Christopher and Kielstra, Allan and Ebcioglu, Kemal and von Praun, Christoph and Sarkar, Vivek},
title = {X10: An Object-Oriented Approach to Non-Uniform Cluster Computing},
year = {2005},
isbn = {1595930310},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1094811.1094852},
doi = {10.1145/1094811.1094852},
booktitle = {Proceedings of the 20th Annual ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications},
pages = {519–538},
numpages = {20},
location = {San Diego, CA, USA},
series = {OOPSLA '05}
}

@INPROCEEDINGS{OpenMP,
author={S. {Iwasaki} and A. {Amer} and K. {Taura} and S. {Seo} and P. {Balaji}},
booktitle={2019 28th International Conference on Parallel Architectures and Compilation Techniques (PACT)},
title={BOLT: Optimizing OpenMP Parallel Regions with User-Level Threads},
year={2019},
volume={},
number={},
pages={29-42},
doi={10.1109/PACT.2019.00011}
}

@article{MaPLe,
author = {Westrick, Sam and Yadav, Rohan and Fluet, Matthew and Acar, Umut A.},
title = {Disentanglement in Nested-Parallel Programs},
year = {2019},
issue_date = {January 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {4},
number = {POPL},
url = {https://doi.org/10.1145/3371115},
doi = {10.1145/3371115},
journal = {Proc. ACM Program. Lang.},
month = dec,
articleno = {47},
numpages = {32},
keywords = {disentanglement, data race, parallel computing, functional programming, memory management}
}

@article{Fluet10,
author = {Fluet, Matthew and Rainey, Mike and Reppy, John and Shaw, Adam},
title = {Implicitly Threaded Parallelism in Manticore},
year = {2010},
issue_date = {November 2010},
publisher = {Cambridge University Press},
address = {USA},
volume = {20},
number = {5--6},
issn = {0956-7968},
url = {https://doi.org/10.1017/S0956796810000201},
doi = {10.1017/S0956796810000201},
journal = {J. Funct. Program.},
month = nov,
pages = {537--576},
numpages = {40}
}

@article{Sivaramakrishnan14,
  author    = {Sivaramakrishnan, KC and
               Lukasz Ziarek and
               Suresh Jagannathan},
  title     = {MultiMLton: {A} multicore-aware runtime for standard {ML}},
  journal   = {J. Funct. Program.},
  volume    = {24},
  number    = {6},
  pages     = {613--674},
  year      = {2014},
  url       = {https://doi.org/10.1017/S0956796814000161},
  doi       = {10.1017/S0956796814000161},
  timestamp = {Sat, 27 May 2017 14:24:34 +0200},
  biburl    = {https://dblp.org/rec/bib/journals/jfp/SivaramakrishnanZJ14},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{everest,
  author = {Karthikeyan Bhargavan and
        Barry Bond and
        Antoine Delignat-Lavaud and
        C\'edric Fournet and
        Chris Hawblitzel and
        Catalin Hritcu and
        Samin Ishtiaq and
        Markulf Kohlweiss and
        Rustan Leino and
        Jay Lorch and
        Kenji Maillard and
        Jianyang Pang and
        Bryan Parno and
        Jonathan Protzenko and
        Tahina Ramananandro and
        Ashay Rane and
        Aseem Rastogi and
        Nikhil Swamy and
        Laure Thompson and
        Peng Wang and
        Santiago {Zanella-B\'eguelin} and
        Jean-Karim Zinzindohou\'e},
  title = {Everest: Towards a Verified, Drop-in Replacement of {HTTPS}},
  booktitle = {2nd Summit on Advances in Programming Languages},
  shortbooktitle = {SNAPL},
  month = may,
  year = 2017,
  url = {http://drops.dagstuhl.de/opus/volltexte/2017/7119/pdf/LIPIcs-SNAPL-2017-1.pdf},
}

@InProceedings{astree,
author="Mauborgne, Laurent",
editor="Jacquart, Ren{\`e}",
title="Astr{\'E}e: Verification of Absence of Runtime Error",
booktitle="Building the Information Society",
year="2004",
publisher="Springer US",
address="Boston, MA",
pages="385--392",
isbn="978-1-4020-8157-6"
}

@inproceedings{Madhavapeddy13,
 author = {Madhavapeddy, Anil and Mortier, Richard and Rotsos, Charalampos and Scott, David and Singh, Balraj and Gazagnaire, Thomas and Smith, Steven and Hand, Steven and Crowcroft, Jon},
 title = {Unikernels: Library Operating Systems for the Cloud},
 year = {2013},
 isbn = {9781450318709},
 publisher = {Association for Computing Machinery},
 address = {New York, NY, USA},
 url = {https://doi.org/10.1145/2451116.2451167},
 doi = {10.1145/2451116.2451167},
 booktitle = {Proceedings of the Eighteenth International Conference on Architectural Support for Programming Languages and Operating Systems},
 pages = {461--472},
 numpages = {12},
 keywords = {functional programming, microkernel, hypervisor},
 location = {Houston, Texas, USA},
 series = {ASPLOS '13}
}

@article{Effekt,
author = {Schuster, Philipp and Brachth\"{a}user, Jonathan Immanuel and Ostermann, Klaus},
title = {Compiling Effect Handlers in Capability-Passing Style},
year = {2020},
issue_date = {August 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {4},
number = {ICFP},
url = {https://doi.org/10.1145/3408975},
doi = {10.1145/3408975},
journal = {Proc. ACM Program. Lang.},
month = aug,
articleno = {93},
numpages = {28},
keywords = {continuation-passing style, compilation, lexically-scoped effect handlers, algebraic effects, control effects, continuations, capability-passing style}
}

@article{Biernacki19,
author = {Biernacki, Dariusz and Pir\'{o}g, Maciej and Polesiuk, Piotr and Sieczkowski, Filip},
title = {Abstracting Algebraic Effects},
year = {2019},
issue_date = {January 2019},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {3},
number = {POPL},
doi = {10.1145/3290319},
journal = {Proc. ACM Program. Lang.},
month = jan,
articleno = {6},
numpages = {28},
keywords = {algebraic effect, existential type, row polymorphism}
}

@article{Biernacki20,
author = {Biernacki, Dariusz and Pir\'{o}g, Maciej and Polesiuk, Piotr and Sieczkowski, Filip},
title = {Binders by Day, Labels by Night: Effect Instances via Lexically Scoped Handlers},
year = {2020},
issue_date = {January 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {4},
number = {POPL},
url = {https://doi.org/10.1145/3371116},
doi = {10.1145/3371116},
journal = {Proc. ACM Program. Lang.},
month = dec,
articleno = {48},
numpages = {29},
keywords = {logical relations, algebraic effects, effect handlers}
}

@inproceedings{Farvardin20,
author = {Farvardin, Kavon and Reppy, John},
title = {From Folklore to Fact: Comparing Implementations of Stacks and Continuations},
year = {2020},
isbn = {9781450376136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3385412.3385994},
doi = {10.1145/3385412.3385994},
booktitle = {Proceedings of the 41st ACM SIGPLAN Conference on Programming Language Design and Implementation},
pages = {75–90},
numpages = {16},
keywords = {Concurrency, Call stacks, Functional Programming, Continuations, Compilers},
location = {London, UK},
series = {PLDI 2020}
}

@inproceedings{Hass17,
author = {Haas, Andreas and Rossberg, Andreas and Schuff, Derek L. and Titzer, Ben L. and Holman, Michael and Gohman, Dan and Wagner, Luke and Zakai, Alon and Bastien, JF},
title = {Bringing the Web up to Speed with WebAssembly},
year = {2017},
isbn = {9781450349888},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3062341.3062363},
doi = {10.1145/3062341.3062363},
abstract = { The maturation of the Web platform has given rise to sophisticated and demanding Web applications such as interactive 3D visualization, audio and video software, and games. With that, efficiency and security of code on the Web has become more important than ever. Yet JavaScript as the only built-in language of the Web is not well-equipped to meet these requirements, especially as a compilation target.  Engineers from the four major browser vendors have risen to the challenge and collaboratively designed a portable low-level bytecode called WebAssembly. It offers compact representation, efficient validation and compilation, and safe low to no-overhead execution. Rather than committing to a specific programming model, WebAssembly is an abstraction over modern hardware, making it language-, hardware-, and platform-independent, with use cases beyond just the Web. WebAssembly has been designed with a formal semantics from the start. We describe the motivation, design and formal semantics of WebAssembly and provide some preliminary experience with implementations. },
booktitle = {Proceedings of the 38th ACM SIGPLAN Conference on Programming Language Design and Implementation},
pages = {185–200},
numpages = {16},
keywords = {assembly languages, just-in-time compilers, virtual machines, type systems, programming languages},
location = {Barcelona, Spain},
series = {PLDI 2017}
}

@online{WasmProposal,
	key={Wasm Effect Handlers},
	title={Typed continuations to model stacks},
	url={https://github.com/WebAssembly/design/issues/1359},
	year={2020},
	urldate={2020-11-09}
}

@online{gopprof,
	key = {Go PProf},
	title = {Profiling a Go Program},
	url = {https://golang.org/pkg/runtime/pprof/#Profile},
	year = {2020},
	urldate = {2020-11-09}
}

@online{wrk2,
	key={Wrk2},
	title = {A constant throughput, correct latency recording variant of wrk},
	url = {https://github.com/giltene/wrk2},
	year = {2020},
	urldate = {2020-11-09}
}

@online{nethttp,
	key={net/http},
	title = {HTTP client and server implementations in Go},
	url = {https://golang.org/pkg/net/http/},
	year = {2020},
	urldate = {2020-11-09}
}

@online{httpaf,
	key={httpaf},
	title = {A high performance, memory efficient, and scalable web server written in OCaml},
	url = {https://github.com/inhabitedtype/httpaf},
	year = {2020},
	urldate = {2020-11-10}
}

@online{libev,
	key = {libev},
	year = {2020},
	title = {A high performance full-featured event loop written in C},
	urldate = {2020-11-10},
	url = {https://metacpan.org/pod/distribution/EV/libev/ev.pod#NAME}
}

@INPROCEEDINGS{Chameneos,
  author={C. {Kaiser} and J. -. {Pradat-Peyre}},
  booktitle={ACS/IEEE International Conference on Computer Systems and Applications, 2003. Book of Abstracts.},
  title={Chameneos, a concurrency game for Java, Ada and others},
  year={2003},
  volume={},
  number={},
  pages={62-},
  doi={10.1109/AICCSA.2003.1227495}
}

@article{Nielson01,
title = "A Selective CPS Transformation",
journal = "Electronic Notes in Theoretical Computer Science",
volume = "45",
pages = "311 - 331",
year = "2001",
note = "MFPS 2001,Seventeenth Conference on the Mathematical Foundations of Programming Semantics",
issn = "1571-0661",
doi = "https://doi.org/10.1016/S1571-0661(04)80969-1",
author = "Lasse R. Nielsen",
}

@inproceedings{Danvy01,
author = {Danvy, Olivier and Nielsen, Lasse R.},
title = {Defunctionalization at Work},
year = {2001},
isbn = {158113388X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/773184.773202},
doi = {10.1145/773184.773202},
booktitle = {Proceedings of the 3rd ACM SIGPLAN International Conference on Principles and Practice of Declarative Programming},
pages = {162–174},
numpages = {13},
keywords = {defunctionalization, supercombinator conversion, ML, continuations, CPS transformation, regular expressions, lambda-lifting, higher-order programs, continuation-passing style (CPS), closure conversion, church encoding, Scheme, first-order programs, direct-style transformation, syntactic theories},
location = {Florence, Italy},
series = {PPDP '01}
}

@online{mlc,
	key = {MLC},
	title = {Intel Memory Latency Checker v3.9},
  url = {https://software.intel.com/content/www/us/en/develop/articles/intelr-memory-latency-checker.html},
	year = {2020},
	urldate = {2020-11-10}
}

@article{Claessen99,
author = {Claessen, Koen},
title = {A Poor Man's Concurrency Monad},
year = {1999},
issue_date = {May 1999},
publisher = {Cambridge University Press},
address = {USA},
volume = {9},
number = {3},
issn = {0956-7968},
url = {https://doi.org/10.1017/S0956796899003342},
doi = {10.1017/S0956796899003342},
journal = {J. Funct. Program.},
month = may,
pages = {313–323},
numpages = {11}
}

@online{lwt,
	key = {Lwt},
	title = {OCaml promises and concurrent I/O},
	url = {https://github.com/ocsigen/lwt},
	year = {2020},
	urldate = {2020-11-10}
}

@online{async,
	key = {Async},
	title = {Typeful concurrent programming},
	url = {https://opensource.janestreet.com/async/},
	year = {2020},
	urldate = {2020-11-10}
}

@article{Bastian19,
author = {Bastian, Th\'{e}ophile and Kell, Stephen and Zappa Nardelli, Francesco},
title = {Reliable and Fast DWARF-Based Stack Unwinding},
year = {2019},
issue_date = {October 2019},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {3},
number = {OOPSLA},
url = {https://doi.org/10.1145/3360572},
doi = {10.1145/3360572},
journal = {Proc. ACM Program. Lang.},
month = oct,
articleno = {146},
numpages = {24},
keywords = {debugging, stack unwinding, DWARF}
}

@online{loom,
	key = {Loom},
	title = {Fibers, continuations and tail-calls for the JVM},
	url = {https://openjdk.java.net/projects/loom/},
	urldate = {2020-11-10},
	year = {2020}
}

@online{swift,
	key = {Swift},
	title = {Swift Concurrency Roadmap},
	url = {https://forums.swift.org/t/swift-concurrency-roadmap/41611},
	urldate = {2020-11-10},
	year = {2020}
}

@article{10.1145/249069.231395,
author = {Bruggeman, Carl and Waddell, Oscar and Dybvig, R. Kent},
title = {Representing Control in the Presence of One-Shot Continuations},
year = {1996},
issue_date = {May 1996},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {31},
number = {5},
issn = {0362-1340},
url = {https://doi.org/10.1145/249069.231395},
doi = {10.1145/249069.231395},
abstract = {Traditional first-class continuation mechanisms allow a captured continuation to be invoked multiple times. Many continuations, however, are invoked only once. This paper introduces one-shot continuations, shows how they interact with traditional multi-shot continuations, and describes a stack-based implementation of control that handles both one-shot and multi-shot continuations. The implementation eliminates the copying overhead for one-shot continuations that is inherent in multi-shot continuations.},
journal = {SIGPLAN Not.},
month = may,
pages = {99–107},
numpages = {9}
}

@inproceedings{Bruggeman96,
author = {Bruggeman, Carl and Waddell, Oscar and Dybvig, R. Kent},
title = {Representing Control in the Presence of One-Shot Continuations},
year = {1996},
isbn = {0897917952},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/231379.231395},
doi = {10.1145/231379.231395},
booktitle = {Proceedings of the ACM SIGPLAN 1996 Conference on Programming Language Design and Implementation},
pages = {99–107},
numpages = {9},
location = {Philadelphia, Pennsylvania, USA},
series = {PLDI '96}
}

@InProceedings{Leijen17,
author="Leijen, Daan",
editor="Chang, Bor-Yuh Evan",
title="Implementing Algebraic Effects in C",
booktitle="Asian Symposium on Programming Languages and Systems",
year="2017",
publisher="Springer International Publishing",
address="Cham",
pages="339--363",
isbn="978-3-319-71237-6"
}

@InProceedings{TFP17,
author="Dolan, Stephen
and Eliopoulos, Spiros
and Hillerstr{\"o}m, Daniel
and Madhavapeddy, Anil
and Sivaramakrishnan, K. C.
and White, Leo",
editor="Wang, Meng
and Owens, Scott",
title="Concurrent System Programming with Effect Handlers",
booktitle="Trends in Functional Programming",
year="2018",
publisher="Springer International Publishing",
address="Cham",
pages="98--117",
isbn="978-3-319-89719-6"
}

@techreport{Felleisen86,
	author={Felleisen, Matthias and P.Friedman, Daniel},
	title={Control Operators, the SECD-Machine, and the Lambda-Calculus},
	month=aug,
	year = {1986},
	url={https://help.luddy.indiana.edu/techreports/TRNNN.cgi?trnum=TR197},
	location={Ebberup, Denmark},
	booktitle={Proc. of the IFIP TC 2/WG2. 2 Working Conf. on Formal Description of Programming Concepts Part III}
}

@article{Sivaramakrishnan20,
author = {Sivaramakrishnan, KC and Dolan, Stephen and White, Leo and Jaffer, Sadiq and Kelly, Tom and Sahoo, Anmol and Parimala, Sudha and Dhiman, Atul and Madhavapeddy, Anil},
title = {Retrofitting Parallelism onto OCaml},
year = {2020},
issue_date = {August 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {4},
number = {ICFP},
url = {https://doi.org/10.1145/3408995},
doi = {10.1145/3408995},
journal = {Proc. ACM Program. Lang.},
month = aug,
articleno = {113},
numpages = {30},
keywords = {concurrent garbage collection, backwards compatibility}
}

@article{Kiselyov18,
   title={Eff Directly in OCaml},
   volume={285},
   ISSN={2075-2180},
   url={http://dx.doi.org/10.4204/EPTCS.285.2},
   DOI={10.4204/eptcs.285.2},
   journal={Electronic Proceedings in Theoretical Computer Science},
   publisher={Open Publishing Association},
   author={Kiselyov, Oleg and Sivaramakrishnan, KC},
   year={2018},
   month={Dec},
   pages={23–58}
}

@InProceedings{Kiselyov12,
author="Kiselyov, Oleg",
editor="Blume, Matthias
and Kobayashi, Naoki
and Vidal, Germ{\'a}n",
title="Delimited Control in OCaml, Abstractly and Concretely: System Description",
booktitle="Functional and Logic Programming",
year="2010",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="304--320",
isbn="978-3-642-12251-4"
}

@InProceedings{Leijen19,
author="Leijen, Daan
and Zorn, Benjamin
and de Moura, Leonardo",
editor="Lin, Anthony Widjaja",
title="Mimalloc: Free List Sharding in Action",
booktitle="Programming Languages and Systems",
year="2019",
publisher="Springer International Publishing",
address="Cham",
pages="244--265",
isbn="978-3-030-34175-6"
}

@InProceedings{Kawahara20,
author="Kawahara, Satoru and Kameyama, Yukiyoshi",
editor="Byrski, Aleksander and Hughes, John",
title="One-Shot Algebraic Effects as Coroutines",
booktitle="Trends in Functional Programming",
year="2020",
publisher="Springer International Publishing",
address="Cham",
pages="159--179",
isbn="978-3-030-57761-2"
}

@Article{Lua,
  author = "Ana Lúcia de Moura and Noemi Rodriguez and Roberto Ierusalimschy",
  title = "Coroutines in Lua",
  abstract = "After a period of oblivion, a renewal of interest in coroutines is being observed. However, most current implementations of coroutine mechanisms are restricted, and motivated by particular uses. The convenience of providing true coroutines as a general control abstraction is disregarded. This paper presents and discusses the coroutine facilities provided by the language Lua, a full implementation of the concept of asymmetric coroutines. It also shows that this powerful construct supports easy and succint implementations of useful control behaviors.",
  journal = {j-jucs},
  year = "2004",
  volume = "10",
  number = "7",
  pages = "910--925",
  date = "2004-07-28",
  month = "jul",
  url = "http://www.jucs.org/jucs_10_7/coroutines_in_lua"}


@article{Forster19,
  author    = {Yannick Forster and Ohad Kammar and Sam Lindley and Matija Pretnar},
  title     = {On the expressive power of user-defined effects: Effect handlers,
               monadic reflection, delimited control},
  journal   = {J. Funct. Program.},
  volume    = {29},
  pages     = {e15},
  year      = {2019},
  url       = {https://doi.org/10.1017/S0956796819000121},
  doi       = {10.1017/S0956796819000121},
  timestamp = {Sat, 05 Sep 2020 17:51:31 +0200},
  biburl    = {https://dblp.org/rec/journals/jfp/0002KLP19.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{Sitaram03,
  title={Unwind-protect in portable Scheme},
  author={Sitaram, Dorai},
  booktitle={Proceedings of the 4th Workshop on Scheme and Functional Programming (7 Nov. 2003), M. Flatt, Ed., no. UUCS-03-023 in Tech. Rep., School of Computing, University of Utah},
  pages={48--52},
  year={2003}
}

@online{Kiselyov,
	key={Dynamic Wind},
	title={The dynamic-wind problem},
	url={http://okmij.org/ftp/continuations/against-callcc.html#dynamic_wind},
	urldate={2020-11-11},
	year={2020}
}

@techreport{Leijen18,
author = {Leijen, Daan},
title = {Algebraic Effect Handlers with Resources and Deep Finalization},
year = {2018},
month = {April},
abstract = {Algebraic effect handlers are a powerful abstraction mechanism that can express many complex control-flow mechanisms. In this article we first define a basic operational semantics and type system for algebraic effect handlers, and then build on that to formalize various optimizations and extensions. In particular, we show how to optimize tail-resumptive operations using skip frames, formalize a semantics and type rules for first-class resource handlers that can express polymorphic references, and formalize a design for finalizers and initializers to handle external resources with linearity constraints. We introduce the concept of deep finalization which ensures finalization is robust across operation handlers even if operations themselves do not resume.},
pages = {35},
number = {MSR-TR-2018-10},
}

@misc{Ahman20,
  title={Asynchronous effects},
  author={Danel Ahman and Matija Pretnar},
  year={2020},
  eprint={2003.02110},
  archivePrefix={arXiv},
  primaryClass={cs.PL}
}

@online{BaseProtect,
	key ={Base.Exn.protect},
	title = {Unwind-protect in JaneStreet Base library},
	url = {https://ocaml.janestreet.com/ocaml-core/v0.13/doc/base/Base/Exn/index.html#val-protectx},
	urldate = {2020-11-11},
	year = {2020}
}

@online{FunProtect,
	key ={Stdlib.Fun.protect},
	title = {Unwind-protect in the OCaml 4.10.0 standard library},
	url = {https://caml.inria.fr/pub/docs/manual-ocaml/libref/Fun.html#exception},
	urldate = {2020-11-11},
	year = {2020}
}

@online{CoreProtect,
	key ={Core.Exn.protect},
	title = {Unwind-protect in JaneStreet Core library},
	url = {https://ocaml.janestreet.com/ocaml-core/109.20.00/doc/core/Exn.html},
	urldate = {2020-11-11},
	year = {2020}
}

@inproceedings{Flatt20,
author = {Flatt, Matthew and Dybvig, R. Kent},
title = {Compiler and Runtime Support for Continuation Marks},
year = {2020},
isbn = {9781450376136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3385412.3385981},
doi = {10.1145/3385412.3385981},
booktitle = {Proceedings of the 41st ACM SIGPLAN Conference on Programming Language Design and Implementation},
pages = {45–58},
numpages = {14},
keywords = {context inspection, Dynamic binding},
location = {London, UK},
series = {PLDI 2020}
}


@article{R5RS,
	key={R5RS},
	title = {Revised5 {Report} on the {Algorithmic} {Language} {Scheme}},
	volume = {11},
	issn = {1573-0557},
	url = {https://doi.org/10.1023/A:1010051815785},
	doi = {10.1023/A:1010051815785},
	abstract = {The report gives a defining description of the programming language Scheme. Scheme is a statically scoped and properly tail-recursive dialect of the Lisp programming language invented by Guy Lewis Steele, Jr. and Gerald Jay Sussman. It was designed to have an exceptionally clear and simple semantics and few different ways to form expressions. A wide variety of programming paradigms, including imperative, functional, and message passing styles, find convenient expression in Scheme.},
	number = {1},
	journal = {Higher-Order and Symbolic Computation},
	month = aug,
	year = {1998},
	pages = {7--105}
}

@online{IntelXeonGold5120Spec,
  key ={Intel Xeon Gold 5120},
  title = {Intel® Xeon® Gold 5120 Processor Specification},
  url = {https://ark.intel.com/content/www/us/en/ark/products/120474/intel-xeon-gold-5120-processor-19-25m-cache-2-20-ghz.html},
  urldate = {2020-11-11},
  year = {2020}
}
